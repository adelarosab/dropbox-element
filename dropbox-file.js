// Generated by CoffeeScript 1.10.0
(function() {
  Polymer({
    is: "dropbox-file",
    behaviors: [window.DropboxItemBehavior],
    properties: {
      _data: {
        notify: true,
        type: String
      },

      /* If true, automatically performs fetch of your element */
      auto: {
        observer: "_observeAuto",
        type: Boolean
      },
      arrayBuffer: {
        reflectToAttribute: true,
        type: Boolean
      },
      blob: {
        reflectToAttribute: true,
        type: Boolean
      }
    },
    _observeAuto: function(auto) {
      var nodes;
      if (this.obs == null) {
        this.obs = new MutationObserver(this.save.bind(this));
      }
      nodes = (Polymer.dom(this.$$("content"))).getDistributedNodes();
      if (auto && this.hasContent && (nodes != null)) {
        return this.obs.observe(nodes[0], {
          attributes: true,
          childList: true,
          characterData: true
        });
      } else {
        return this.obs.disconnect();
      }
    },
    attached: function() {
      this.hasContent = true;
      return this._observeAuto(true);
    },

    /* Read data from Dropbox File */
    fetch: function() {
      return this.execute(function() {
        return this.instance.readFile(this.path, (function(_this) {
          return function(error, _data) {
            _this._data = _data;
            if (error != null) {
              return _this.fire("error", error);
            }
          };
        })(this));
      });
    },
    ready: function() {
      if (this.auto) {
        return this.fetch();
      }
    },

    /* Synchronize Dropbox File */
    save: function() {
      return this.execute(function() {
        return this.instance.writeFile(this.path, this.textContent, (function(_this) {
          return function(error) {
            if (error != null) {
              return _this.fire("error", error);
            }
          };
        })(this));
      });
    }
  });

}).call(this);

//# sourceMappingURL=dropbox-file.js.map
